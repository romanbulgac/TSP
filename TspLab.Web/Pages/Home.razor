@page "/"
@using TspLab.Domain.Entities
@using TspLab.Domain.Models
@using TspLab.Web.Services
@inject TspApiService ApiService
@inject SignalRService SignalRService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>TSP Lab - Genetic Algorithm Solver</PageTitle>

<div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-4">
                <div class="flex items-center">
                    <h1 class="text-2xl font-bold text-gray-900">TSP Lab</h1>
                    <span class="ml-3 px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
                        Genetic Algorithm Solver
                    </span>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="flex items-center">
                        <div class="w-2 h-2 rounded-full @GetConnectionStatusClass()"></div>
                        <span class="ml-2 text-sm text-gray-600">@GetConnectionStatusText()</span>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
            <!-- Sidebar Configuration -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-lg shadow-sm border p-6 sticky top-8">
                    <h2 class="text-lg font-semibold text-gray-900 mb-6">Configuration</h2>
                    
                    <!-- City Generation -->
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Cities</label>
                        <div class="flex space-x-2">
                            <input @bind="cityCount" type="number" min="3" max="100" 
                                   class="flex-1 px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                   placeholder="Count" />
                            <button @onclick="GenerateCities" disabled="@isGenerating"
                                    class="px-4 py-2 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 disabled:opacity-50">
                                @if (isGenerating) { <span>...</span> } else { <span>Generate</span> }
                            </button>
                        </div>
                    </div>

                    <!-- GA Parameters -->
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Population Size</label>
                            <input @bind="config.PopulationSize" type="number" min="10" max="500"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Max Generations</label>
                            <input @bind="config.MaxGenerations" type="number" min="10" max="2000"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Mutation Rate</label>
                            <input @bind="config.MutationRate" type="number" step="0.001" min="0" max="1"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                        </div>
                          <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Elitism Rate</label>
                            <input @bind="config.ElitismRate" type="number" step="0.01" min="0" max="1"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Update Interval (generations)</label>
                            <input @bind="config.ProgressReportInterval" type="number" min="1" max="500"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                            <p class="text-xs text-gray-500 mt-1">How often to send updates to UI (higher = better performance)</p>
                        </div>
                    </div>

                    <!-- Strategy Selection -->
                    @if (availableStrategies.HasValue)
                    {
                        <div class="mt-6 space-y-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Crossover</label>
                                <select @bind="config.CrossoverName" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm">
                                    @foreach (var crossover in availableStrategies.Value.Crossovers)
                                    {
                                        <option value="@crossover">@crossover</option>
                                    }
                                </select>
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Mutation</label>
                                <select @bind="config.MutationName" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm">
                                    @foreach (var mutation in availableStrategies.Value.Mutations)
                                    {
                                        <option value="@mutation">@mutation</option>
                                    }
                                </select>
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Fitness Function</label>
                                <select @bind="config.FitnessFunctionName" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm">
                                    @foreach (var fitness in availableStrategies.Value.FitnessFunctions)
                                    {
                                        <option value="@fitness">@fitness</option>
                                    }
                                </select>
                            </div>
                        </div>
                    }

                    <!-- Control Buttons -->
                    <div class="mt-6 space-y-2">
                        <button @onclick="StartSolving" disabled="@(!CanStartSolving())"
                                class="w-full px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed">
                            @if (isSolving) { <span>Solving...</span> } else { <span>Start Solving</span> }
                        </button>
                        
                        @if (isSolving)
                        {
                            <button @onclick="StopSolving"
                                    class="w-full px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">
                                Stop Solving
                            </button>
                        }
                    </div>
                </div>
            </div>

            <!-- Main Content Area -->
            <div class="lg:col-span-3 space-y-6">
                <!-- Current Best Solution -->
                @if (currentResult.HasValue && cities != null)
                {
                    <div class="bg-white rounded-lg shadow-sm border p-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4">Best Solution</h3>
                        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                            <div class="text-center">
                                <div class="text-2xl font-bold text-blue-600">@currentResult.Value.Generation</div>
                                <div class="text-sm text-gray-500">Generation</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-green-600">@currentResult.Value.BestDistance.ToString("F2")</div>
                                <div class="text-sm text-gray-500">Distance</div>                            </div>                            <div class="text-center">
                                <div class="text-2xl font-bold text-purple-600">@(currentResult.Value.BestFitness > 0 ? currentResult.Value.BestFitness.ToString("F2") : "0.00")</div>
                                <div class="text-sm text-gray-500">Fitness</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-orange-600">@currentResult.Value.ElapsedMilliseconds</div>
                                <div class="text-sm text-gray-500">Time (ms)</div>
                            </div>
                        </div>
                        
                        <!-- Tour Visualization Placeholder -->
                        <div class="bg-gray-100 rounded-lg p-4 text-center">
                            <canvas id="tourCanvas" width="600" height="400" class="mx-auto border rounded"></canvas>
                            <p class="text-sm text-gray-600 mt-2">Tour Visualization</p>
                        </div>
                    </div>
                }                <!-- Convergence Chart -->
                @if (convergenceData.Count > 0)
                {
                    <div class="bg-white rounded-lg shadow-sm border p-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4">Convergence Chart</h3>
                        <div class="convergence-chart-container bg-gray-100 rounded-lg p-4">
                            <canvas id="convergenceChart" width="800" height="300"></canvas>
                        </div>
                    </div>
                }

                <!-- Execution Log -->
                @if (executionLog.Count > 0)
                {
                    <div class="bg-white rounded-lg shadow-sm border p-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4">Execution Log</h3>
                        <div class="bg-gray-900 rounded-lg p-4 h-64 overflow-y-auto">
                            @foreach (var logEntry in executionLog.TakeLast(20))
                            {
                                <div class="text-green-400 text-sm font-mono">@logEntry</div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private int cityCount = 20;
    private City[]? cities;
    private bool isGenerating;
    private bool isSolving;
    private AvailableStrategies? availableStrategies;
    private GeneticAlgorithmConfig config = new GeneticAlgorithmConfig();
    private GeneticAlgorithmResult? currentResult;
    private List<double> convergenceData = new();
    private List<string> executionLog = new();    protected override async Task OnInitializedAsync()
    {
        try
        {
            AddLogEntry("Initializing Home component...");
            
            // Load available strategies
            AddLogEntry("Loading available strategies...");
            availableStrategies = await ApiService.GetAvailableStrategiesAsync();
            AddLogEntry("Available strategies loaded successfully");
            
            // Start SignalR connection
            AddLogEntry("Starting SignalR connection...");
            var signalRConnected = await SignalRService.StartConnectionAsync();
            if (signalRConnected)
            {
                AddLogEntry("SignalR connected successfully");
                SignalRService.SubscribeToResults(OnGAResultReceived);
                AddLogEntry("Subscribed to GA results");
            }
            else
            {
                AddLogEntry("ERROR: Failed to connect to SignalR");
            }
            
            // Generate initial cities
            AddLogEntry("Generating initial cities...");
            await GenerateCities();
        }
        catch (Exception ex)
        {
            AddLogEntry($"ERROR in OnInitializedAsync: {ex.Message}");
        }
    }protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try 
            {  
                // Wait for JavaScript and DOM to be fully ready
                await Task.Delay(500);
                
                // Test if visualization functions are available
                var functionsReady = await JSRuntime.InvokeAsync<bool>("eval", 
                    "typeof drawCities === 'function' && typeof drawTour === 'function' && typeof updateConvergenceChart === 'function'");
                
                if (functionsReady)
                {
                    AddLogEntry("TSP visualization functions loaded successfully");
                    
                    // Draw initial cities if available
                    if (cities != null && cities.Length > 0)
                    {
                        await DrawCities();
                        AddLogEntry("Initial cities drawn");
                    }
                }
                else
                {
                    AddLogEntry("ERROR: TSP visualization functions not ready");
                }
            }
            catch (Exception ex)
            {
                AddLogEntry($"Error initializing visualization: {ex.Message}");
            }
        }
    }private async Task GenerateCities()
    {
        isGenerating = true;
        StateHasChanged();
        
        var randomSeed = Random.Shared.Next();
        AddLogEntry($"Starting city generation for {cityCount} cities with seed {randomSeed}...");
        
        try
        {
            cities = await ApiService.GenerateRandomCitiesAsync(cityCount, randomSeed);
            if (cities != null)
            {
                AddLogEntry($"Generated {cities.Length} cities successfully");
                await DrawCities();
                AddLogEntry("Cities drawn on canvas");
            }
            else
            {
                AddLogEntry("ERROR: Failed to generate cities - null response");
            }
        }
        catch (Exception ex)
        {
            AddLogEntry($"ERROR generating cities: {ex.Message}");
        }
        
        isGenerating = false;
        StateHasChanged();
    }    
    private async Task StartSolving(){
        if (cities == null || !config.IsValid()) return;
        
        isSolving = true;
        convergenceData.Clear();
        
        // Clear the convergence chart
        await ClearConvergenceChart();
        
        AddLogEntry($"Starting GA with {config.PopulationSize} population, {config.MaxGenerations} generations");
        StateHasChanged();
        
        var success = await ApiService.StartTspSolvingAsync(cities, config, SignalRService.ConnectionId);
        if (!success)
        {
            AddLogEntry("Failed to start solving");
            isSolving = false;
            StateHasChanged();
        }
    }    private async Task StopSolving()
    {
        if (!isSolving) return;
        
        try
        {
            AddLogEntry("Stopping solver...");
            var success = await ApiService.StopTspSolvingAsync(SignalRService.ConnectionId);
            
            if (success)
            {
                AddLogEntry("Stop request sent successfully");
            }
            else
            {
                AddLogEntry("Failed to send stop request");
            }
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error stopping solver: {ex.Message}");
        }
        finally
        {
            isSolving = false;
            StateHasChanged();
        }
    }

    private async Task ClearConvergenceChart()
    {
        try
        {
            var functionAvailable = await JSRuntime.InvokeAsync<bool>("eval", "typeof clearConvergenceChart === 'function'");
            if (functionAvailable)
            {
                await JSRuntime.InvokeVoidAsync("clearConvergenceChart");
                AddLogEntry("Convergence chart cleared");
            }
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error clearing convergence chart: {ex.Message}");
        }
    }    private async Task OnGAResultReceived(GeneticAlgorithmResult result)
    {
        currentResult = result;
        convergenceData.Add(result.BestFitness);
        
        // Debug information
        AddLogEntry($"Received result: Gen={result.Generation}, Fitness={result.BestFitness:F4}, Distance={result.BestDistance:F2}");
        
        if (result.Generation % 10 == 0 || result.IsComplete)
        {
            AddLogEntry($"Gen {result.Generation}: Best={result.BestFitness:F2}, Avg={result.AverageFitness:F2}, Time={result.ElapsedMilliseconds}ms");
        }
        
        // Update chart every 5 generations or when complete for better performance
        if (result.Generation % 5 == 0 || result.IsComplete)
        {
            await UpdateConvergenceChart();
        }
        
        if (result.IsComplete)
        {
            isSolving = false;
            AddLogEntry($"Completed! Final best distance: {result.BestDistance:F2}");
            
            // Final chart update with all data
            await UpdateConvergenceChart();
        }
        
        await InvokeAsync(() =>
        {
            StateHasChanged();
            _ = Task.Run(async () =>
            {
                await DrawTour(result.BestTour);
                await UpdateConvergenceChart();
            });
        });
    }

    private bool CanStartSolving()
    {
        return cities != null && cities.Length >= 3 && !isSolving && config.IsValid();
    }

    private string GetConnectionStatusClass()
    {
        return SignalRService.ConnectionState switch
        {
            Microsoft.AspNetCore.SignalR.Client.HubConnectionState.Connected => "bg-green-500",
            Microsoft.AspNetCore.SignalR.Client.HubConnectionState.Connecting => "bg-yellow-500",
            Microsoft.AspNetCore.SignalR.Client.HubConnectionState.Reconnecting => "bg-yellow-500",
            _ => "bg-red-500"
        };
    }

    private string GetConnectionStatusText()
    {
        return SignalRService.ConnectionState.ToString();
    }

    private void AddLogEntry(string message)
    {
        var timestamp = DateTime.Now.ToString("HH:mm:ss");
        executionLog.Add($"[{timestamp}] {message}");
    }    private async Task DrawCities()
    {
        if (cities == null) return;
        
        try 
        {
            // Check if the function is available
            var functionAvailable = await JSRuntime.InvokeAsync<bool>("eval", "typeof drawCities === 'function'");
            if (!functionAvailable)
            {
                AddLogEntry("ERROR: drawCities function not available");
                return;
            }
            
            // Check if canvas element exists
            var canvasExists = await JSRuntime.InvokeAsync<bool>("eval", "document.getElementById('tourCanvas') !== null");
            if (!canvasExists)
            {
                AddLogEntry("ERROR: tourCanvas element not found");
                return;
            }
            
            var cityData = cities.Select(c => new { x = c.X, y = c.Y }).ToArray();
            await JSRuntime.InvokeVoidAsync("drawCities", "tourCanvas", cityData);
            
            AddLogEntry($"Successfully drew {cities.Length} cities");
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error drawing cities: {ex.Message}");
        }
    }    private async Task DrawTour(int[] tour)
    {
        if (cities == null) return;
        
        try 
        {
            // Check if the function is available
            var functionAvailable = await JSRuntime.InvokeAsync<bool>("eval", "typeof drawTour === 'function'");
            if (!functionAvailable)
            {
                AddLogEntry("ERROR: drawTour function not available");
                return;
            }
            
            // Check if canvas element exists
            var canvasExists = await JSRuntime.InvokeAsync<bool>("eval", "document.getElementById('tourCanvas') !== null");
            if (!canvasExists)
            {
                AddLogEntry("ERROR: tourCanvas element not found");
                return;
            }
            
            var tourPoints = tour.Select(i => new { x = cities[i].X, y = cities[i].Y }).ToArray();
            await JSRuntime.InvokeVoidAsync("drawTour", "tourCanvas", tourPoints);
            
            AddLogEntry($"Successfully drew tour with {tour.Length} cities");
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error drawing tour: {ex.Message}");
        }
    }    private async Task UpdateConvergenceChart()
    {
        if (convergenceData.Count == 0) return;
        
        try 
        {
            // Check if the function is available
            var functionAvailable = await JSRuntime.InvokeAsync<bool>("eval", "typeof updateConvergenceChart === 'function'");
            if (!functionAvailable)
            {
                AddLogEntry("ERROR: updateConvergenceChart function not available");
                return;
            }
            
            // Check if canvas element exists
            var canvasExists = await JSRuntime.InvokeAsync<bool>("eval", "document.getElementById('convergenceChart') !== null");
            if (!canvasExists)
            {
                AddLogEntry("ERROR: convergenceChart element not found");
                return;
            }
            
            // Prepare data for the chart - ensure we have valid numeric values
            var chartData = convergenceData
                .Where(d => !double.IsNaN(d) && !double.IsInfinity(d) && d > 0)
                .ToArray();
            
            if (chartData.Length == 0)
            {
                AddLogEntry("WARNING: No valid convergence data to display");
                return;
            }
            
            // Update the chart with validated data
            await JSRuntime.InvokeVoidAsync("updateConvergenceChart", "convergenceChart", chartData);
            
            // Calculate convergence statistics
            var improvement = chartData.Length > 1 ? 
                ((chartData.Last() - chartData.First()) / chartData.First() * 100) : 0;
            var currentFitness = chartData.Last();
            var estimatedDistance = currentFitness > 0 ? 1000.0 / currentFitness : 0;
            
            AddLogEntry($"Chart updated: {chartData.Length} points, Current fitness: {currentFitness:F4}, Distance: {estimatedDistance:F2}, Improvement: {improvement:F1}%");
        }
        catch (JSException jsEx)
        {
            AddLogEntry($"JavaScript error updating convergence chart: {jsEx.Message}");
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error updating convergence chart: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        SignalRService.UnsubscribeFromResults(OnGAResultReceived);
        await SignalRService.DisposeAsync();
    }
}
