@page "/solver"
@using TspLab.Domain.Entities
@using TspLab.Domain.Models
@using TspLab.Domain.Interfaces
@using TspLab.Web.Services
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@inject TspApiService ApiService
@inject SignalRService SignalRService
@inject IJSRuntime JSRuntime
@inject IEnumerable<ITspSolver> TspSolvers
@inject CityDataService CityDataService
@implements IAsyncDisposable

<div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-4">
                <div class="flex items-center">
                    <h1 class="text-2xl font-bold text-gray-900">TSP Solver</h1>
                    <span class="ml-3 px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">
                        Advanced Configuration
                    </span>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="flex items-center">
                        <div class="w-2 h-2 rounded-full @GetConnectionStatusClass()"></div>
                        <span class="ml-2 text-sm text-gray-600">@GetConnectionStatusText()</span>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="grid grid-cols-1 xl:grid-cols-3 gap-8">
            
            <!-- Configuration Panel -->
            <div class="xl:col-span-1">
                <div class="bg-white rounded-lg shadow-sm border p-6 sticky top-8">
                    <h2 class="text-lg font-semibold text-gray-900 mb-6">Problem Configuration</h2>
                    
                    <!-- Problem Setup -->
                    <div class="space-y-6">
                        <!-- City Configuration -->
                        <div class="border rounded-lg p-4">
                            <h3 class="font-medium text-gray-900 mb-3">City Setup</h3>
                            <div class="space-y-3">
                                <div class="flex space-x-2">
                                    <input @bind="cityCount" type="number" min="3" max="200" 
                                           class="flex-1 px-3 py-2 border border-gray-300 rounded-md text-sm" 
                                           placeholder="City count" />
                                    <button @onclick="GenerateRandomCities" disabled="@isGenerating"
                                            class="px-4 py-2 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 disabled:opacity-50">
                                        Random
                                    </button>
                                </div>
                                <div class="flex space-x-2">
                                    <button @onclick="GenerateCircularCities" disabled="@isGenerating"
                                            class="flex-1 px-3 py-2 bg-gray-600 text-white text-sm rounded-md hover:bg-gray-700 disabled:opacity-50">
                                        Circular
                                    </button>
                                    <button @onclick="GenerateClusteredCities" disabled="@isGenerating"
                                            class="flex-1 px-3 py-2 bg-gray-600 text-white text-sm rounded-md hover:bg-gray-700 disabled:opacity-50">
                                        Clustered
                                    </button>
                                </div>
                                <div class="text-xs text-gray-500">
                                    Current: @(cities?.Length ?? 0) cities
                                    @if (citiesFromTspLib && !string.IsNullOrEmpty(citySourceName))
                                    {
                                        <div class="mt-1 px-2 py-1 bg-purple-100 text-purple-800 rounded text-xs">
                                            üìÅ Loaded from TSPLIB: @citySourceName
                                        </div>
                                        <button @onclick="ClearTspLibCities" 
                                                class="mt-1 px-2 py-1 bg-red-100 text-red-700 hover:bg-red-200 rounded text-xs">
                                            Clear TSPLIB Cities
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Algorithm Selection -->
                        <div class="border rounded-lg p-4">
                            <h3 class="font-medium text-gray-900 mb-3">Algorithm Selection</h3>
                            <div class="space-y-3">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Algorithm</label>
                                    <select @bind="selectedAlgorithm" @bind:after="OnAlgorithmChanged" 
                                            class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm">
                                        @foreach (var solver in availableSolvers)
                                        {
                                            <option value="@solver.Name">@solver.Name</option>
                                        }
                                    </select>
                                </div>
                                @if (!string.IsNullOrEmpty(selectedAlgorithmDescription))
                                {
                                    <div class="text-xs text-gray-600 bg-gray-50 p-2 rounded">
                                        @selectedAlgorithmDescription
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Algorithm Parameters (show only for Genetic Algorithm) -->
                        @if (selectedAlgorithm == "Genetic Algorithm")
                        {
                            <div class="border rounded-lg p-4">
                                <h3 class="font-medium text-gray-900 mb-3">Algorithm Parameters</h3>
                                <div class="space-y-3">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Population Size</label>
                                        <input @bind="config.PopulationSize" type="number" min="10" max="1000"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Max Generations</label>
                                        <input @bind="config.MaxGenerations" type="number" min="10" max="5000"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Mutation Rate</label>
                                        <input @bind="config.MutationRate" type="number" step="0.001" min="0" max="1"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Crossover Rate</label>
                                        <input @bind="config.CrossoverRate" type="number" step="0.01" min="0" max="1"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Elitism Rate</label>
                                        <input @bind="config.ElitismRate" type="number" step="0.01" min="0" max="1"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Update Interval</label>
                                        <input @bind="config.ProgressReportInterval" type="number" min="1" max="500"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                        <p class="text-xs text-gray-500 mt-1">Generations between UI updates</p>
                                    </div>
                                </div>
                            </div>
                        }

                        <!-- Strategy Selection (show only for Genetic Algorithm) -->
                        @if (selectedAlgorithm == "Genetic Algorithm" && availableStrategies.HasValue)
                        {
                            <div class="border rounded-lg p-4">
                                <h3 class="font-medium text-gray-900 mb-3">Genetic Operators</h3>
                                <div class="space-y-3">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Crossover Strategy</label>
                                        <select @bind="config.CrossoverName" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm">
                                            @foreach (var crossover in availableStrategies.Value.Crossovers)
                                            {
                                                <option value="@crossover">@crossover</option>
                                            }
                                        </select>
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Mutation Strategy</label>
                                        <select @bind="config.MutationName" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm">
                                            @foreach (var mutation in availableStrategies.Value.Mutations)
                                            {
                                                <option value="@mutation">@mutation</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                        }

                        <!-- ACO Parameters (show only for Ant Colony Optimization) -->
                        @if (selectedAlgorithm == "Ant Colony Optimization")
                        {
                            <div class="border rounded-lg p-4">
                                <h3 class="font-medium text-gray-900 mb-3">ACO Parameters</h3>
                                <div class="space-y-3">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Ant Count</label>
                                        <input @bind="acoConfig.AntCount" @bind:after="OnAcoConfigChanged" type="number" min="5" max="500"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                        <p class="text-xs text-gray-500 mt-1">Range: 5-500 ants</p>
                                        @if (acoConfig.AntCount > 200)
                                        {
                                            <p class="text-xs text-amber-600 mt-1">‚ö†Ô∏è High ant count may slow down performance</p>
                                        }
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Max Iterations</label>
                                        <input @bind="acoConfig.MaxIterations" @bind:after="OnAcoConfigChanged" type="number" min="50" max="2000"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                        <p class="text-xs text-gray-500 mt-1">Range: 50-2000 iterations</p>
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Alpha (Pheromone Influence)</label>
                                        <input @bind="acoConfig.Alpha" type="number" step="0.1" min="0.1" max="5"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Beta (Heuristic Influence)</label>
                                        <input @bind="acoConfig.Beta" type="number" step="0.1" min="0.1" max="10"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Evaporation Rate</label>
                                        <input @bind="acoConfig.EvaporationRate" type="number" step="0.01" min="0.01" max="0.9"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Elite Ant Count</label>
                                        <input @bind="acoConfig.EliteAntCount" type="number" min="0" max="10"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                    </div>
                                    
                                    <div class="flex items-center">
                                        <input @bind="acoConfig.UseLocalSearch" type="checkbox" 
                                               class="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
                                        <label class="ml-2 text-sm text-gray-700">Use Local Search (2-opt)</label>
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Update Interval</label>
                                        <input @bind="acoConfig.ProgressReportInterval" type="number" min="1" max="100"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                        <p class="text-xs text-gray-500 mt-1">Iterations between UI updates</p>
                                    </div>
                                </div>
                            </div>
                        }

                        <!-- SA Parameters (show only for Simulated Annealing) -->
                        @if (selectedAlgorithm == "Simulated Annealing")
                        {
                            <div class="border rounded-lg p-4">
                                <h3 class="font-medium text-gray-900 mb-3">SA Parameters</h3>
                                <div class="space-y-3">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Initial Temperature</label>
                                        <input @bind="saConfig.InitialTemperature" @bind:after="OnSaConfigChanged" type="number" step="100" min="100" max="10000"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                        <p class="text-xs text-gray-500 mt-1">Range: 100-10000</p>
                                        @if (saConfig.InitialTemperature > 5000)
                                        {
                                            <p class="text-xs text-amber-600 mt-1">‚ö†Ô∏è High temperature may slow convergence</p>
                                        }
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Final Temperature</label>
                                        <input @bind="saConfig.FinalTemperature" @bind:after="OnSaConfigChanged" type="number" step="0.01" min="0.01" max="10"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                        <p class="text-xs text-gray-500 mt-1">Range: 0.01-10.0</p>
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Cooling Rate</label>
                                        <input @bind="saConfig.CoolingRate" type="number" step="0.001" min="0.9" max="0.9999"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                        <p class="text-xs text-gray-500 mt-1">Range: 0.9-0.9999 (higher = slower cooling)</p>
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Max Iterations</label>
                                        <input @bind="saConfig.MaxIterations" @bind:after="OnSaConfigChanged" type="number" min="1000" max="100000"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                        <p class="text-xs text-gray-500 mt-1">Range: 1000-100000 iterations</p>
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">2-Opt Probability</label>
                                        <input @bind="saConfig.TwoOptProbability" type="number" step="0.1" min="0" max="1"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                        <p class="text-xs text-gray-500 mt-1">Probability of using 2-opt vs swap move</p>
                                    </div>
                                    
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Reheat Check Interval</label>
                                        <input @bind="saConfig.ReheatCheckInterval" type="number" min="100" max="5000"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" />
                                        <p class="text-xs text-gray-500 mt-1">Iterations between reheating checks</p>
                                    </div>
                                    
                                    <div class="flex items-center">
                                        <input @bind="saConfig.UseNearestNeighborInitialization" type="checkbox" 
                                               class="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
                                        <label class="ml-2 text-sm text-gray-700">Use Nearest Neighbor Initialization</label>
                                    </div>
                                    
                                    <div class="flex items-center">
                                        <input @bind="saConfig.EnableAdaptiveReheating" type="checkbox" 
                                               class="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
                                        <label class="ml-2 text-sm text-gray-700">Enable Adaptive Reheating</label>
                                    </div>
                                </div>
                            </div>
                        }

                        <!-- Control Buttons -->
                        <div class="space-y-2">
                            @if (selectedAlgorithm == "Ant Colony Optimization" && !acoConfig.IsValid())
                            {
                                <div class="p-2 bg-red-50 border border-red-200 rounded text-sm text-red-700">
                                    ‚ö†Ô∏è Invalid ACO configuration. Please check the parameters.
                                </div>
                            }
                            @if (selectedAlgorithm == "Genetic Algorithm" && !config.IsValid())
                            {
                                <div class="p-2 bg-red-50 border border-red-200 rounded text-sm text-red-700">
                                    ‚ö†Ô∏è Invalid GA configuration. Please check the parameters.
                                </div>
                            }
                            @if (selectedAlgorithm == "Simulated Annealing" && !saConfig.IsValid())
                            {
                                <div class="p-2 bg-red-50 border border-red-200 rounded text-sm text-red-700">
                                    ‚ö†Ô∏è Invalid SA configuration. Please check the parameters.
                                </div>
                            }
                            <div class="flex space-x-2">
                                <button @onclick="StartSolving" disabled="@(!CanStartSolving())"
                                        class="flex-1 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed">
                                    @if (isSolving) { <span>Solving...</span> } else { <span>Start Solving</span> }
                                </button>
                                <button @onclick="PauseSolving" disabled="@(!isSolving || selectedAlgorithm != "Genetic Algorithm")"
                                        class="px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 disabled:opacity-50">
                                    Pause
                                </button>
                                <button @onclick="StopSolving" disabled="@(!isSolving)"
                                        class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:opacity-50">
                                    Stop
                                </button>
                            </div>
                        </div>

                        <!-- Saved States Section (only for Genetic Algorithm) -->
                        @if (selectedAlgorithm == "Genetic Algorithm")
                        {
                            <div class="border rounded-lg p-4 mt-4">
                                <h3 class="font-medium text-gray-900 mb-3">Saved States</h3>
                                <div class="space-y-3">
                                    <button @onclick="LoadSavedStates" disabled="@isLoadingStates"
                                            class="w-full px-3 py-2 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 disabled:opacity-50">
                                        @if (isLoadingStates) { <span>Loading...</span> } else { <span>Refresh States</span> }
                                    </button>
                                    @if (savedStates?.Any() == true)
                                    {
                                        <div class="max-h-32 overflow-y-auto space-y-2">
                                            @foreach (var state in savedStates)
                                            {
                                                <div class="flex items-center justify-between p-2 bg-gray-50 rounded border">
                                                    <div class="flex-1 text-xs">
                                                        <div class="font-medium">Gen: @state.CurrentGeneration/@state.MaxGenerations</div>
                                                        <div class="text-gray-600">Distance: @(state.BestDistance.ToString("F1"))</div>
                                                        <div class="text-gray-500">@state.SavedAt.ToString("MM/dd HH:mm")</div>
                                                    </div>
                                                    <div class="flex space-x-1">
                                                        <button @onclick="() => ResumeSolving(state.SessionId)" disabled="@isSolving"
                                                                class="px-2 py-1 bg-green-600 text-white text-xs rounded hover:bg-green-700 disabled:opacity-50">
                                                            Resume
                                                        </button>
                                                        <button @onclick="() => DeleteSavedState(state.SessionId)" disabled="@isSolving"
                                                                class="px-2 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700 disabled:opacity-50">
                                                            Delete
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-sm text-gray-500 text-center py-2">
                                            No saved states available
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Visualization and Results -->
            <div class="xl:col-span-2">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    
                    <!-- Tour Visualization -->
                    <div class="bg-white rounded-lg shadow-sm border p-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4">Tour Visualization</h3>
                        <div class="relative">
                            <canvas id="solverCanvas" width="400" height="400" 
                                    class="w-full h-auto border border-gray-200 rounded"></canvas>
                            @if (cities == null || cities.Length == 0)
                            {
                                <div class="absolute inset-0 flex items-center justify-center text-gray-500">
                                    Generate cities to see visualization
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Convergence Chart (for Genetic Algorithm) -->
                    @if (selectedAlgorithm == "Genetic Algorithm")
                    {
                        <div class="bg-white rounded-lg shadow-sm border p-6">
                            <h3 class="text-lg font-semibold text-gray-900 mb-4">Convergence Chart</h3>
                            <div class="convergence-chart-container">
                                <canvas id="solverConvergenceChart" width="800" height="300"></canvas>
                                @if (!convergenceData.Any())
                                {
                                    <div class="absolute inset-0 flex items-center justify-center text-gray-500">
                                        Start solving to see convergence
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    <!-- Convergence Chart (for Ant Colony Optimization) -->
                    @if (selectedAlgorithm == "Ant Colony Optimization")
                    {
                        <div class="bg-white rounded-lg shadow-sm border p-6">
                            <h3 class="text-lg font-semibold text-gray-900 mb-4">ACO Convergence</h3>
                            <div class="convergence-chart-container">
                                <canvas id="acoConvergenceChart" width="800" height="300"></canvas>
                                @if (!convergenceData.Any())
                                {
                                    <div class="absolute inset-0 flex items-center justify-center text-gray-500">
                                        Start solving to see convergence
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    <!-- Convergence Chart (for Simulated Annealing) -->
                    @if (selectedAlgorithm == "Simulated Annealing")
                    {
                        <div class="bg-white rounded-lg shadow-sm border p-6">
                            <h3 class="text-lg font-semibold text-gray-900 mb-4">SA Convergence</h3>
                            <div class="convergence-chart-container">
                                <canvas id="saConvergenceChart" width="800" height="300"></canvas>
                                @if (!convergenceData.Any())
                                {
                                    <div class="absolute inset-0 flex items-center justify-center text-gray-500">
                                        Start solving to see convergence
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    <!-- Algorithm Results (for individual algorithms) -->
                    @if (lastSolverResult != null)
                    {
                        <div class="bg-white rounded-lg shadow-sm border p-6">
                            <h3 class="text-lg font-semibold text-gray-900 mb-4">Algorithm Results</h3>
                            <div class="grid grid-cols-2 gap-4">
                                <div class="bg-blue-50 p-3 rounded">
                                    <div class="text-sm font-medium text-blue-700">Algorithm</div>
                                    <div class="text-lg font-bold text-blue-900">@lastSolverResult.AlgorithmName</div>
                                </div>
                                <div class="bg-green-50 p-3 rounded">
                                    <div class="text-sm font-medium text-green-700">Distance</div>
                                    <div class="text-lg font-bold text-green-900">@lastSolverResult.Distance.ToString("F2")</div>
                                </div>
                                <div class="bg-purple-50 p-3 rounded">
                                    <div class="text-sm font-medium text-purple-700">Execution Time</div>
                                    <div class="text-lg font-bold text-purple-900">@lastSolverResult.ExecutionTime.TotalMilliseconds.ToString("F0")ms</div>
                                </div>
                                <div class="bg-orange-50 p-3 rounded">
                                    <div class="text-sm font-medium text-orange-700">Cities</div>
                                    <div class="text-lg font-bold text-orange-900">@(cities?.Length ?? 0)</div>
                                </div>
                            </div>
                        </div>
                    }

                    <!-- Statistics (for Genetic Algorithm) -->
                    @if (selectedAlgorithm == "Genetic Algorithm")
                    {
                        <div class="bg-white rounded-lg shadow-sm border p-6 lg:col-span-2">
                            <h3 class="text-lg font-semibold text-gray-900 mb-4">Solution Statistics</h3>
                            @if (currentResult.HasValue)
                            {
                                <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                                    <div class="text-center">
                                        <div class="text-2xl font-bold text-blue-600">@currentResult.Value.Generation</div>
                                        <div class="text-sm text-gray-500">Generation</div>
                                    </div>
                                    <div class="text-center">
                                        <div class="text-2xl font-bold text-green-600">@currentResult.Value.BestDistance.ToString("F2")</div>
                                        <div class="text-sm text-gray-500">Best Distance</div>
                                    </div>
                                    <div class="text-center">
                                        <div class="text-2xl font-bold text-purple-600">@currentResult.Value.BestFitness.ToString("F4")</div>
                                        <div class="text-sm text-gray-500">Best Fitness</div>
                                    </div>
                                    <div class="text-center">
                                        <div class="text-2xl font-bold text-orange-600">@(currentResult.Value.ElapsedMilliseconds / 1000.0).ToString("F1")s</div>
                                        <div class="text-sm text-gray-500">Elapsed Time</div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="text-center text-gray-500 py-8">
                                    No solution data available
                                </div>
                            }
                        </div>
                    }

                    <!-- Statistics (for Ant Colony Optimization) -->
                    @if (selectedAlgorithm == "Ant Colony Optimization")
                    {
                        <div class="bg-white rounded-lg shadow-sm border p-6 lg:col-span-2">
                            <h3 class="text-lg font-semibold text-gray-900 mb-4">ACO Statistics</h3>
                            @if (currentAcoResult != null)
                            {
                                <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                                    <div class="text-center">
                                        <div class="text-2xl font-bold text-blue-600">@currentAcoResult.Iteration</div>
                                        <div class="text-sm text-gray-500">Iteration</div>
                                    </div>
                                    <div class="text-center">
                                        <div class="text-2xl font-bold text-green-600">@currentAcoResult.BestDistance.ToString("F2")</div>
                                        <div class="text-sm text-gray-500">Best Distance</div>
                                    </div>
                                    <div class="text-center">
                                        <div class="text-2xl font-bold text-purple-600">@currentAcoResult.AverageDistance.ToString("F2")</div>
                                        <div class="text-sm text-gray-500">Avg Distance</div>
                                    </div>
                                    <div class="text-center">
                                        <div class="text-2xl font-bold text-orange-600">@((currentAcoResult.ElapsedMilliseconds / 1000.0).ToString("F1"))</div>
                                        <div class="text-sm text-gray-500">Elapsed Time</div>
                                    </div>
                                </div>
                                
                                @if (currentAcoResult.Statistics.Any())
                                {
                                    <div class="mt-4 grid grid-cols-2 md:grid-cols-3 gap-4 pt-4 border-t">
                                        @if (currentAcoResult.Statistics.TryGetValue("MinPheromone", out var minPheromone) && TryConvertToDouble(minPheromone, out var minPheromoneValue))
                                        {
                                            <div class="text-center">
                                                <div class="text-lg font-bold text-red-600">@minPheromoneValue.ToString("F4")</div>
                                                <div class="text-xs text-gray-500">Min Pheromone</div>
                                            </div>
                                        }
                                        @if (currentAcoResult.Statistics.TryGetValue("MaxPheromone", out var maxPheromone) && TryConvertToDouble(maxPheromone, out var maxPheromoneValue))
                                        {
                                            <div class="text-center">
                                                <div class="text-lg font-bold text-emerald-600">@maxPheromoneValue.ToString("F4")</div>
                                                <div class="text-xs text-gray-500">Max Pheromone</div>
                                            </div>
                                        }
                                        <div class="text-center">
                                            <div class="text-lg font-bold text-amber-600">@currentAcoResult.StagnationCount</div>
                                            <div class="text-xs text-gray-500">Stagnation Count</div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-center text-gray-500 py-8">
                                    No ACO data available
                                </div>
                            }
                        </div>
                    }

                    <!-- Statistics (for Simulated Annealing) -->
                    @if (selectedAlgorithm == "Simulated Annealing")
                    {
                        <div class="bg-white rounded-lg shadow-sm border p-6 lg:col-span-2">
                            <h3 class="text-lg font-semibold text-gray-900 mb-4">SA Statistics</h3>
                            @if (currentSaResult != null)
                            {
                                <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                                    <div class="text-center">
                                        <div class="text-2xl font-bold text-blue-600">@currentSaResult.Iteration</div>
                                        <div class="text-sm text-gray-500">Iteration</div>
                                    </div>
                                    <div class="text-center">
                                        <div class="text-2xl font-bold text-green-600">@currentSaResult.BestDistance.ToString("F2")</div>
                                        <div class="text-sm text-gray-500">Best Distance</div>
                                    </div>
                                    <div class="text-center">
                                        <div class="text-2xl font-bold text-red-600">@currentSaResult.CurrentTemperature.ToString("F2")</div>
                                        <div class="text-sm text-gray-500">Temperature</div>
                                    </div>
                                    <div class="text-center">
                                        <div class="text-2xl font-bold text-purple-600">@(currentSaResult.AcceptanceRate * 100).ToString("F1")%</div>
                                        <div class="text-sm text-gray-500">Acceptance Rate</div>
                                    </div>
                                </div>
                                
                                <div class="mt-4 grid grid-cols-2 md:grid-cols-3 gap-4 pt-4 border-t">
                                    <div class="text-center">
                                        <div class="text-lg font-bold text-orange-600">@currentSaResult.Phase</div>
                                        <div class="text-xs text-gray-500">Current Phase</div>
                                    </div>
                                    <div class="text-center">
                                        <div class="text-lg font-bold text-teal-600">@((currentSaResult.ElapsedTime.TotalMilliseconds / 1000.0).ToString("F1"))s</div>
                                        <div class="text-xs text-gray-500">Elapsed Time</div>
                                    </div>
                                    <div class="text-center">
                                        <div class="text-lg font-bold text-indigo-600">@currentSaResult.Improvements</div>
                                        <div class="text-xs text-gray-500">Improvements</div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="text-center text-gray-500 py-8">
                                    No SA data available
                                </div>
                            }
                        </div>
                    }

                    <!-- Solution Log -->
                    <div class="bg-white rounded-lg shadow-sm border p-6 lg:col-span-2">
                        <h3 class="text-lg font-semibold text-gray-900 mb-4">Solution Log</h3>
                        <div class="h-32 overflow-y-auto bg-gray-50 rounded border p-3 font-mono text-xs">
                            @if (executionLog.Any())
                            {
                                @foreach (var entry in executionLog.TakeLast(20))
                                {
                                    <div class="text-gray-700">@entry</div>
                                }
                            }
                            else
                            {
                                <div class="text-gray-500">No log entries yet...</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
</div>
</div>


@code {
    private City[]? cities;
    private int cityCount = 20;
    private bool isGenerating = false;
    private bool isSolving = false;
    
    // TSPLIB integration
    private string? citySourceName;
    private bool citiesFromTspLib = false;
    
    // Pause/Resume functionality
    private bool isLoadingStates = false;
    private List<GeneticAlgorithmStateSummary>? savedStates;
    
    // Algorithm selection
    private List<ITspSolver> availableSolvers = new();
    private string selectedAlgorithm = "Genetic Algorithm";
    private string selectedAlgorithmDescription = "";
    private SolverResult? lastSolverResult;
    
    private GeneticAlgorithmConfig config = new()
    {
        PopulationSize = 50,
        MaxGenerations = 500,
        MutationRate = 0.02,
        CrossoverRate = 0.8,
        ElitismRate = 0.1,
        CrossoverName = "OrderCrossover",
        MutationName = "SwapMutation"
    };

    private AntColonyConfig acoConfig = new()
    {
        AntCount = 50,
        MaxIterations = 300,
        Alpha = 1.0,
        Beta = 2.0,
        EvaporationRate = 0.5,
        InitialPheromone = 0.1,
        EliteAntCount = 1,
        UseLocalSearch = true,
        ProgressReportInterval = 10
    };

    private SimulatedAnnealingConfig saConfig = new()
    {
        InitialTemperature = 1000.0,
        FinalTemperature = 0.1,
        CoolingRate = 0.995,
        MaxIterations = 10000,
        UseNearestNeighborInitialization = true,
        TwoOptProbability = 0.7,
        EnableAdaptiveReheating = true,
        ReheatCheckInterval = 1000
    };

    private AvailableStrategies? availableStrategies;
    private GeneticAlgorithmResult? currentResult;
    private AntColonyResult? currentAcoResult;
    private SimulatedAnnealingResult? currentSaResult;
    private List<double> convergenceData = new();
    private List<string> executionLog = new();

    // Result tracking class
    public class SolverResult
    {
        public string AlgorithmName { get; set; } = "";
        public double Distance { get; set; }
        public TimeSpan ExecutionTime { get; set; }
        public Tour? Tour { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AddLogEntry("Initializing Solver component...");
            
            // Initialize available solvers
            AddLogEntry("Loading available TSP solvers...");
            availableSolvers = TspSolvers.ToList();
            if (availableSolvers.Count > 0)
            {
                selectedAlgorithm = availableSolvers[0].Name;
                UpdateAlgorithmDescription();
                AddLogEntry($"Loaded {availableSolvers.Count} TSP solvers:");
                foreach (var solver in availableSolvers)
                {
                    AddLogEntry($"  - {solver.Name}: {solver.Description}");
                }
            }
            else
            {
                AddLogEntry("ERROR: No TSP solvers found! Check dependency injection.");
            }
            
            AddLogEntry("Loading available strategies...");
            availableStrategies = await ApiService.GetAvailableStrategiesAsync();
            AddLogEntry("Available strategies loaded successfully");
            
            // Subscribe to CityDataService changes
            CityDataService.OnCitiesChanged += OnCitiesChanged;
            
            AddLogEntry("Starting SignalR connection...");
            var signalRConnected = await SignalRService.StartConnectionAsync();
            if (signalRConnected)
            {
                AddLogEntry("SignalR connected successfully");
                SignalRService.SubscribeToResults(OnGAResultReceived);
                SignalRService.SubscribeToAcoResults(OnAcoResultReceived);
                SignalRService.SubscribeToSaResults(OnSaResultReceived);
                AddLogEntry("Subscribed to GA, ACO, and SA results");
            }
            else
            {
                AddLogEntry("ERROR: Failed to connect to SignalR");
            }
            
            // Check if cities are available from TSPLIB
            if (CityDataService.HasCities())
            {
                cities = CityDataService.GetCities();
                citySourceName = CityDataService.GetSourceName();
                citiesFromTspLib = true;
                cityCount = cities?.Length ?? 0;
                AddLogEntry($"Loaded {cityCount} cities from TSPLIB: {citySourceName}");
            }
            else
            {
                // Generate initial cities only if none from TSPLIB
                AddLogEntry("Generating initial random cities...");
                await GenerateRandomCities();
            }
        }
        catch (Exception ex)
        {
            AddLogEntry($"ERROR in Solver initialization: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Wait for JavaScript and DOM to be fully ready
                await Task.Delay(500);
                
                // Test if visualization functions are available
                var functionsReady = await JSRuntime.InvokeAsync<bool>("eval", 
                    "typeof drawCities === 'function' && typeof drawTour === 'function' && typeof updateConvergenceChart === 'function' && typeof Chart !== 'undefined'");
                
                if (functionsReady)
                {
                    AddLogEntry("TSP visualization functions and Chart.js loaded successfully");
                    
                    // Draw initial cities if available
                    if (cities != null && cities.Length > 0)
                    {
                        await DrawCities();
                        AddLogEntry("Initial cities drawn");
                    }
                }
                else
                {
                    AddLogEntry("ERROR: TSP visualization functions or Chart.js not ready");
                }
            }
            catch (Exception ex)
            {
                AddLogEntry($"Error initializing visualization: {ex.Message}");
            }
        }
    }

    private async Task GenerateRandomCities()
    {
        if (isGenerating) return;
        
        isGenerating = true;
        AddLogEntry($"Generating {cityCount} random cities...");
        
        try
        {
            cities = await ApiService.GenerateRandomCitiesAsync(cityCount);
            citiesFromTspLib = false;
            citySourceName = null;
            await DrawCities();
            AddLogEntry($"Generated {cities!.Length} cities successfully");
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error generating cities: {ex.Message}");
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private void ClearTspLibCities()
    {
        try
        {
            CityDataService.ClearCities();
            citiesFromTspLib = false;
            citySourceName = null;
            AddLogEntry("Cleared TSPLIB cities - you can now generate new cities");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error clearing TSPLIB cities: {ex.Message}");
        }
    }

    private async Task GenerateCircularCities()
    {
        if (isGenerating) return;
        
        isGenerating = true;
        AddLogEntry($"Generating {cityCount} cities in circular pattern...");
        
        try
        {
            var random = new Random();
            var centerX = 200;
            var centerY = 200;
            var radius = 150;
            
            cities = new City[cityCount];
            for (int i = 0; i < cityCount; i++)
            {
                var angle = 2 * Math.PI * i / cityCount;
                var x = centerX + radius * Math.Cos(angle) + random.Next(-10, 11);
                var y = centerY + radius * Math.Sin(angle) + random.Next(-10, 11);
                cities[i] = new City(i, $"City{i}", x, y);
            }
            
            citiesFromTspLib = false;
            citySourceName = null;
            await DrawCities();
            AddLogEntry($"Generated {cities!.Length} circular cities successfully");
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error generating circular cities: {ex.Message}");
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private async Task GenerateClusteredCities()
    {
        if (isGenerating) return;
        
        isGenerating = true;
        AddLogEntry($"Generating {cityCount} clustered cities...");
        
        try
        {
            var random = new Random();
            cities = new City[cityCount];
            
            // Create 3-5 clusters
            var clusterCount = Math.Min(5, Math.Max(3, cityCount / 5));
            var citiesPerCluster = cityCount / clusterCount;
            var cityIndex = 0;
            
            for (int cluster = 0; cluster < clusterCount; cluster++)
            {
                var clusterCenterX = random.Next(50, 350);
                var clusterCenterY = random.Next(50, 350);
                var clusterRadius = random.Next(30, 80);
                
                var citiesInThisCluster = (cluster == clusterCount - 1) ? 
                    cityCount - cityIndex : citiesPerCluster;
                
                for (int i = 0; i < citiesInThisCluster; i++)
                {
                    var angle = random.NextDouble() * 2 * Math.PI;
                    var distance = random.NextDouble() * clusterRadius;
                    var x = clusterCenterX + distance * Math.Cos(angle);
                    var y = clusterCenterY + distance * Math.Sin(angle);
                    
                    cities[cityIndex++] = new City(cityIndex - 1, $"City{cityIndex - 1}", x, y);
                }
            }
            
            citiesFromTspLib = false;
            citySourceName = null;
            await DrawCities();
            AddLogEntry($"Generated {cities!.Length} clustered cities successfully");
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error generating clustered cities: {ex.Message}");
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private async void OnCitiesChanged()
    {
        try
        {
            if (CityDataService.HasCities())
            {
                cities = CityDataService.GetCities();
                citySourceName = CityDataService.GetSourceName();
                citiesFromTspLib = true;
                cityCount = cities?.Length ?? 0;
                AddLogEntry($"Cities updated from TSPLIB: {citySourceName} ({cityCount} cities)");
                
                // Redraw cities if visualization is ready
                if (cities != null && cities.Length > 0)
                {
                    await DrawCities();
                }
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error handling cities change: {ex.Message}");
        }
    }

    private async Task StartSolving()
    {
        if (cities == null || isSolving) return;

        try
        {
            // For Genetic Algorithm, use the existing streaming approach
            if (selectedAlgorithm == "Genetic Algorithm")
            {
                // Set isSolving for streaming algorithms
                isSolving = true;
                StateHasChanged();
                
                convergenceData.Clear();
                AddLogEntry($"Starting genetic algorithm with {config.PopulationSize} population...");
                
                // Ensure we have a SignalR connection before starting
                if (SignalRService.ConnectionState != Microsoft.AspNetCore.SignalR.Client.HubConnectionState.Connected)
                {
                    AddLogEntry("ERROR: SignalR not connected. Please refresh the page.");
                    isSolving = false;
                    return;
                }
                
                await ApiService.StartTspSolvingAsync(cities, config, SignalRService.ConnectionId);
            }
            // For Ant Colony Optimization, use the ACO streaming approach
            else if (selectedAlgorithm == "Ant Colony Optimization")
            {
                // Set isSolving for streaming algorithms
                isSolving = true;
                StateHasChanged();
                
                convergenceData.Clear();
                currentAcoResult = null;
                AddLogEntry($"Starting Ant Colony Optimization with {acoConfig.AntCount} ants...");
                
                // Ensure we have a SignalR connection before starting
                if (SignalRService.ConnectionState != Microsoft.AspNetCore.SignalR.Client.HubConnectionState.Connected)
                {
                    AddLogEntry("ERROR: SignalR not connected. Please refresh the page.");
                    isSolving = false;
                    return;
                }
                
                await ApiService.StartAcoSolvingAsync(cities, acoConfig, SignalRService.ConnectionId);
            }
            // For Simulated Annealing, use the SA streaming approach
            else if (selectedAlgorithm == "Simulated Annealing")
            {
                // Set isSolving for streaming algorithms
                isSolving = true;
                StateHasChanged();
                
                convergenceData.Clear();
                currentSaResult = null;
                AddLogEntry($"Starting Simulated Annealing with temperature {saConfig.InitialTemperature}...");
                
                // Ensure we have a SignalR connection before starting
                if (SignalRService.ConnectionState != Microsoft.AspNetCore.SignalR.Client.HubConnectionState.Connected)
                {
                    AddLogEntry("ERROR: SignalR not connected. Please refresh the page.");
                    isSolving = false;
                    return;
                }
                
                await ApiService.StartSaSolvingAsync(cities, saConfig, SignalRService.ConnectionId);
            }
            else
            {
                // For other algorithms (NN, 2-Opt), let RunSelectedAlgorithm handle isSolving
                await RunSelectedAlgorithm();
            }
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error starting solver: {ex.Message}");
            isSolving = false;
        }
        
        StateHasChanged();
    }

    private async Task StopSolving()
    {
        if (!isSolving) return;
        
        try
        {
            AddLogEntry("Stopping solver...");
            var success = await ApiService.StopTspSolvingAsync(SignalRService.ConnectionId);
            
            if (success)
            {
                AddLogEntry("Stop request sent successfully");
            }
            else
            {
                AddLogEntry("Failed to send stop request");
            }
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error stopping solver: {ex.Message}");
        }
        finally
        {
            isSolving = false;
            StateHasChanged();
        }
    }

    private async Task PauseSolving()
    {
        if (!isSolving || selectedAlgorithm != "Genetic Algorithm") return;
        
        try
        {
            AddLogEntry("Pausing genetic algorithm execution...");
            var connectionId = SignalRService.ConnectionId;
            if (string.IsNullOrEmpty(connectionId))
            {
                AddLogEntry("ERROR: No active SignalR connection");
                return;
            }
            
            var success = await ApiService.PauseTspSolvingAsync(connectionId);
            
            if (success)
            {
                AddLogEntry("Pause request sent successfully");
                // Refresh saved states to show the new paused state
                await LoadSavedStates();
            }
            else
            {
                AddLogEntry("Failed to send pause request");
            }
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error pausing solver: {ex.Message}");
        }
        finally
        {
            isSolving = false;
            StateHasChanged();
        }
    }

    private async Task LoadSavedStates()
    {
        if (isLoadingStates) return;
        
        try
        {
            isLoadingStates = true;
            AddLogEntry("Loading saved states...");
            
            savedStates = await ApiService.GetSavedStatesAsync();
            
            if (savedStates?.Any() == true)
            {
                AddLogEntry($"Found {savedStates.Count} saved states");
            }
            else
            {
                AddLogEntry("No saved states found");
            }
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error loading saved states: {ex.Message}");
        }
        finally
        {
            isLoadingStates = false;
            StateHasChanged();
        }
    }

    private async Task ResumeSolving(string sessionId)
    {
        if (isSolving) return;
        
        try
        {
            isSolving = true;
            convergenceData.Clear();
            AddLogEntry($"Resuming genetic algorithm from saved state {sessionId}...");
            
            var success = await ApiService.ResumeTspSolvingAsync(sessionId, SignalRService.ConnectionId);
            
            if (!success)
            {
                AddLogEntry("Failed to resume execution");
                isSolving = false;
            }
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error resuming solver: {ex.Message}");
            isSolving = false;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task DeleteSavedState(string sessionId)
    {
        if (isSolving) return;
        
        try
        {
            AddLogEntry($"Deleting saved state {sessionId}...");
            
            var success = await ApiService.DeleteSavedStateAsync(sessionId);
            
            if (success)
            {
                AddLogEntry("State deleted successfully");
                await LoadSavedStates(); // Refresh the list
            }
            else
            {
                AddLogEntry("Failed to delete state");
            }
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error deleting state: {ex.Message}");
        }
    }

    /// <summary>
    /// Manually calculates tour distance for validation purposes
    /// </summary>
    private double CalculateManualDistance(int[] tour)
    {
        if (tour == null || cities == null || tour.Length == 0)
            return double.MaxValue;

        var distance = 0.0;
        for (int i = 0; i < tour.Length; i++)
        {
            var fromIndex = tour[i];
            var toIndex = tour[(i + 1) % tour.Length];
            
            if (fromIndex < 0 || fromIndex >= cities.Length || 
                toIndex < 0 || toIndex >= cities.Length)
                return double.MaxValue;
                
            var fromCity = cities[fromIndex];
            var toCity = cities[toIndex];
            distance += fromCity.DistanceTo(toCity);
        }
        
        return distance;
    }

    private async Task RunSelectedAlgorithm()
    {
        if (cities == null || isSolving) return;

        AddLogEntry($"Looking for algorithm: '{selectedAlgorithm}' among {availableSolvers.Count} available solvers");
        
        var solver = availableSolvers.FirstOrDefault(s => s.Name == selectedAlgorithm);
        if (solver == null)
        {
            AddLogEntry($"ERROR: Algorithm '{selectedAlgorithm}' not found");
            AddLogEntry("Available algorithms:");
            foreach (var availableSolver in availableSolvers)
            {
                AddLogEntry($"  - '{availableSolver.Name}'");
            }
            return;
        }

        isSolving = true;
        AddLogEntry($"Starting {solver.Name}...");
        StateHasChanged();

        try
        {
            AddLogEntry($"Calling SolveAsync on {solver.GetType().Name} with {cities.Length} cities");
            var stopwatch = System.Diagnostics.Stopwatch.StartNew();
            var tour = await solver.SolveAsync(cities);
            stopwatch.Stop();

            if (tour == null)
            {
                AddLogEntry($"ERROR: {solver.Name} returned null tour");
                return;
            }

            lastSolverResult = new SolverResult
            {
                AlgorithmName = solver.Name,
                Distance = tour.Distance,
                ExecutionTime = stopwatch.Elapsed,
                Tour = tour
            };

            AddLogEntry($"Completed! Distance: {tour.Distance:F2}, Time: {stopwatch.ElapsedMilliseconds}ms");

            // Draw the tour
            if (tour.Cities != null && tour.Cities.Length > 0)
            {
                await DrawTour(tour.Cities.ToArray());
            }
            else
            {
                AddLogEntry("WARNING: Tour has no cities to draw");
            }
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error running {solver.Name}: {ex.Message}");
            AddLogEntry($"Stack trace: {ex.StackTrace}");
        }
        finally
        {
            isSolving = false;
            StateHasChanged();
        }
    }

    private void ValidateAndCorrectAcoConfig()
    {
        var corrected = false;
        
        if (acoConfig.AntCount < 5)
        {
            acoConfig.AntCount = 5;
            corrected = true;
        }
        else if (acoConfig.AntCount > 500)
        {
            acoConfig.AntCount = 500;
            corrected = true;
        }
        
        if (acoConfig.MaxIterations < 50)
        {
            acoConfig.MaxIterations = 50;
            corrected = true;
        }
        else if (acoConfig.MaxIterations > 2000)
        {
            acoConfig.MaxIterations = 2000;
            corrected = true;
        }
        
        // Auto-adjust progress report interval for performance
        if (acoConfig.AntCount > 200 && acoConfig.ProgressReportInterval < 20)
        {
            acoConfig.ProgressReportInterval = 20;
            corrected = true;
            AddLogEntry("Progress report interval increased for better performance with high ant count");
        }
        else if (acoConfig.AntCount <= 200 && acoConfig.ProgressReportInterval > 10)
        {
            acoConfig.ProgressReportInterval = 10;
            corrected = true;
        }
        
        if (corrected)
        {
            AddLogEntry("ACO parameters were automatically corrected to valid ranges");
            StateHasChanged();
        }
    }

    private void OnAcoConfigChanged()
    {
        ValidateAndCorrectAcoConfig();
    }

    private void ValidateAndCorrectSaConfig()
    {
        var corrected = false;
        
        if (saConfig.InitialTemperature < 100)
        {
            saConfig.InitialTemperature = 100;
            corrected = true;
        }
        else if (saConfig.InitialTemperature > 10000)
        {
            saConfig.InitialTemperature = 10000;
            corrected = true;
        }
        
        if (saConfig.FinalTemperature < 0.01)
        {
            saConfig.FinalTemperature = 0.01;
            corrected = true;
        }
        else if (saConfig.FinalTemperature > 10.0)
        {
            saConfig.FinalTemperature = 10.0;
            corrected = true;
        }
        
        // Ensure final temperature is less than initial temperature
        if (saConfig.FinalTemperature >= saConfig.InitialTemperature)
        {
            saConfig.FinalTemperature = saConfig.InitialTemperature * 0.001;
            corrected = true;
            AddLogEntry("Final temperature adjusted to be less than initial temperature");
        }
        
        if (saConfig.MaxIterations < 1000)
        {
            saConfig.MaxIterations = 1000;
            corrected = true;
        }
        else if (saConfig.MaxIterations > 100000)
        {
            saConfig.MaxIterations = 100000;
            corrected = true;
        }
        
        if (saConfig.CoolingRate < 0.9)
        {
            saConfig.CoolingRate = 0.9;
            corrected = true;
        }
        else if (saConfig.CoolingRate > 0.9999)
        {
            saConfig.CoolingRate = 0.9999;
            corrected = true;
        }
        
        if (saConfig.ReheatCheckInterval < 100)
        {
            saConfig.ReheatCheckInterval = 100;
            corrected = true;
        }
        else if (saConfig.ReheatCheckInterval > 5000)
        {
            saConfig.ReheatCheckInterval = 5000;
            corrected = true;
        }
        
        if (corrected)
        {
            AddLogEntry("SA parameters were automatically corrected to valid ranges");
            StateHasChanged();
        }
    }

    private void OnSaConfigChanged()
    {
        ValidateAndCorrectSaConfig();
    }

    private bool CanStartSolving()
    {
        if (cities == null || cities.Length < 3 || isSolving)
            return false;
        
        return selectedAlgorithm switch
        {
            "Genetic Algorithm" => config.IsValid(),
            "Ant Colony Optimization" => acoConfig.IsValid(),
            "Simulated Annealing" => saConfig.IsValid(),
            _ => true // For other algorithms that don't require complex validation
        };
    }

    private string GetConnectionStatusClass()
    {
        return SignalRService.ConnectionState switch
        {
            Microsoft.AspNetCore.SignalR.Client.HubConnectionState.Connected => "bg-green-500",
            Microsoft.AspNetCore.SignalR.Client.HubConnectionState.Connecting => "bg-yellow-500",
            Microsoft.AspNetCore.SignalR.Client.HubConnectionState.Reconnecting => "bg-yellow-500",
            _ => "bg-red-500"
        };
    }

    private string GetConnectionStatusText()
    {
        return SignalRService.ConnectionState.ToString();
    }

    private void AddLogEntry(string message)
    {
        var timestamp = DateTime.Now.ToString("HH:mm:ss");
        executionLog.Add($"[{timestamp}] {message}");
        if (executionLog.Count > 100) // Keep only last 100 entries
        {
            executionLog.RemoveAt(0);
        }
        StateHasChanged();
    }

    private async Task DrawCities()
    {
        if (cities == null) return;
        
        try 
        {
            // Check if the function is available
            var functionAvailable = await JSRuntime.InvokeAsync<bool>("eval", "typeof drawCities === 'function'");
            if (!functionAvailable)
            {
                AddLogEntry("ERROR: drawCities function not available");
                return;
            }
            
            // Check if canvas element exists
            var canvasExists = await JSRuntime.InvokeAsync<bool>("eval", "document.getElementById('solverCanvas') !== null");
            if (!canvasExists)
            {
                AddLogEntry("ERROR: solverCanvas element not found");
                return;
            }
            
            var cityData = cities.Select(c => new { x = c.X, y = c.Y }).ToArray();
            await JSRuntime.InvokeVoidAsync("drawCities", "solverCanvas", cityData);
            
            AddLogEntry($"Successfully drew {cities.Length} cities");
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error drawing cities: {ex.Message}");
        }
    }

    private async Task DrawTour(int[] tour)
    {
        if (cities == null) return;
        
        try 
        {
            // Check if the function is available
            var functionAvailable = await JSRuntime.InvokeAsync<bool>("eval", "typeof drawTour === 'function'");
            if (!functionAvailable)
            {
                AddLogEntry("ERROR: drawTour function not available");
                return;
            }
            
            // Check if canvas element exists
            var canvasExists = await JSRuntime.InvokeAsync<bool>("eval", "document.getElementById('solverCanvas') !== null");
            if (!canvasExists)
            {
                AddLogEntry("ERROR: solverCanvas element not found");
                return;
            }
            
            var tourPoints = tour.Select(i => new { x = cities[i].X, y = cities[i].Y }).ToArray();
            await JSRuntime.InvokeVoidAsync("drawTour", "solverCanvas", tourPoints);
            
            AddLogEntry($"Successfully drew tour with {tour.Length} cities");
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error drawing tour: {ex.Message}");
        }
    }

    private async Task OnGAResultReceived(GeneticAlgorithmResult result)
    {
        currentResult = result;
        convergenceData.Add(result.BestDistance);
        // Debug information
        AddLogEntry($"Received result: Gen={result.Generation}, Fitness={result.BestFitness:F4}, Distance={result.BestDistance:F2}");
        
        if (result.Generation % 10 == 0 || result.IsComplete)
        {
            AddLogEntry($"Gen {result.Generation}: Best Distance={result.BestDistance:F2}, Avg Fitness={result.AverageFitness:F2}, Time={result.ElapsedMilliseconds}ms");
        }
        
        // Validate tour consistency
        if (result.BestTour != null && cities != null)
        {
            try
            {
                // Manually calculate distance to verify correctness
                var manualDistance = CalculateManualDistance(result.BestTour);
                var discrepancy = Math.Abs(manualDistance - result.BestDistance);
                
                if (discrepancy > 0.01) // Allow small floating point differences
                {
                    AddLogEntry($"WARNING: Distance discrepancy detected! Manual: {manualDistance:F2}, GA: {result.BestDistance:F2}, Diff: {discrepancy:F2}");
                }
            }
            catch (Exception ex)
            {
                AddLogEntry($"Error validating tour distance: {ex.Message}");
            }
        }
        
        // Update chart every 5 generations or when complete for better performance
        if (result.Generation % 5 == 0 || result.IsComplete)
        {
            await UpdateConvergenceChart();
        }
        
        if (result.IsComplete)
        {
            isSolving = false;
            AddLogEntry($"Completed! Final best distance: {result.BestDistance:F2}");
            
            // Final chart update with all data
            await UpdateConvergenceChart();
        }
        
        await InvokeAsync(() =>
        {
            StateHasChanged();
            _ = Task.Run(async () =>
            {
                if (result.BestTour != null)
                {
                    await DrawTour(result.BestTour);
                }
                if (result.IsComplete)
                {
                    await UpdateConvergenceChart();
                }
            });
        });     
    
    }

    private async Task OnAcoResultReceived(AntColonyResult result)
    {
        currentAcoResult = result;
        convergenceData.Add(result.BestDistance);
        
        AddLogEntry($"ACO Iter {result.Iteration}: Best={result.BestDistance:F2}, Avg={result.AverageDistance:F2}");
        
        if (result.IsComplete)
        {
            isSolving = false;
            AddLogEntry($"ACO Completed! Final best distance: {result.BestDistance:F2}");
        }
        
        await InvokeAsync(() =>
        {
            StateHasChanged();
            _ = Task.Run(async () =>
            {
                if (result.BestTour != null)
                {
                    await DrawTour(result.BestTour);
                }
                await UpdateAcoConvergenceChart();
            });
        });
    }

    private async Task OnSaResultReceived(SimulatedAnnealingResult result)
    {
        currentSaResult = result;
        convergenceData.Add(result.BestDistance);
        
        AddLogEntry($"SA Iter {result.Iteration}: Best={result.BestDistance:F2}, Temp={result.CurrentTemperature:F1}, Phase={result.Phase}");
        
        if (result.IsComplete)
        {
            isSolving = false;
            AddLogEntry($"SA Completed! Final best distance: {result.BestDistance:F2}");
        }
        
        await InvokeAsync(() =>
        {
            StateHasChanged();
            _ = Task.Run(async () =>
            {
                await DrawTour(result.BestTour.ToArray());
                await UpdateSaConvergenceChart();
            });
        });
    }

    private async Task UpdateConvergenceChart()
    {
        if (convergenceData.Count == 0) return;
        
        try 
        {
            var chartData = convergenceData.ToArray();
            await JSRuntime.InvokeVoidAsync("updateConvergenceChart", "solverConvergenceChart", chartData);
            
            // Calculate convergence statistics - now using distance values directly
            var improvement = chartData.Length > 1 ? 
                ((chartData.First() - chartData.Last()) / chartData.First() * 100) : 0; // Inverted because lower distance is better
            var currentDistance = chartData.Last();
            
            AddLogEntry($"Chart updated: {chartData.Length} points, Current distance: {currentDistance:F2}, Improvement: {improvement:F1}%");
        }
        catch (JSException jsEx)
        {
            AddLogEntry($"JavaScript error updating convergence chart: {jsEx.Message}");
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error updating convergence chart: {ex.Message}");
        }
    }

    private async Task UpdateAcoConvergenceChart()
    {
        if (convergenceData.Count == 0) return;
        
        try 
        {
            var chartData = convergenceData.ToArray();
            await JSRuntime.InvokeVoidAsync("updateConvergenceChart", "acoConvergenceChart", chartData);
            
            AddLogEntry($"ACO chart updated with {chartData.Length} points");
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error updating ACO convergence chart: {ex.Message}");
        }
    }

    private async Task UpdateSaConvergenceChart()
    {
        if (convergenceData.Count == 0) return;
        
        try 
        {
            var chartData = convergenceData.ToArray();
            await JSRuntime.InvokeVoidAsync("updateConvergenceChart", "saConvergenceChart", chartData);
            
            AddLogEntry($"SA chart updated with {chartData.Length} points");
        }
        catch (Exception ex)
        {
            AddLogEntry($"Error updating SA convergence chart: {ex.Message}");
        }
    }

    private void OnAlgorithmChanged()
    {
        AddLogEntry($"Algorithm changed to: {selectedAlgorithm}");
        UpdateAlgorithmDescription();
    }

    private void UpdateAlgorithmDescription()
    {
        // Update description based on selected algorithm
        switch (selectedAlgorithm)
        {
            case "Genetic Algorithm":
                AddLogEntry("Genetic Algorithm: Evolutionary approach using crossover and mutation");
                break;
            case "Ant Colony Optimization":
                AddLogEntry("Ant Colony Optimization: Nature-inspired algorithm using pheromone trails");
                break;
            case "Simulated Annealing":
                AddLogEntry("Simulated Annealing: Metaheuristic using probabilistic acceptance to escape local optima");
                break;
            case "Nearest Neighbor":
                AddLogEntry("Nearest Neighbor: Simple heuristic always choosing closest unvisited city");
                break;
            case "2-Opt":
                AddLogEntry("2-Opt: Local search algorithm that improves tours by swapping edges");
                break;
            default:
                AddLogEntry($"Selected algorithm: {selectedAlgorithm}");
                break;
        }
    }

    private double TryConvertToDouble(string value)
    {
        if (double.TryParse(value, out var result))
            return result;
        return 0.0;
    }

    private bool TryConvertToDouble(object value, out double result)
    {
        result = 0.0;
        if (value == null) return false;
        
        if (value is double d)
        {
            result = d;
            return true;
        }
        
        return double.TryParse(value.ToString(), out result);
    }

    public async ValueTask DisposeAsync()
    {
        SignalRService.UnsubscribeFromResults(OnGAResultReceived);
        SignalRService.UnsubscribeFromAcoResults(OnAcoResultReceived);
        SignalRService.UnsubscribeFromSaResults(OnSaResultReceived);
        CityDataService.OnCitiesChanged -= OnCitiesChanged;
        await SignalRService.DisposeAsync();
    }
}
